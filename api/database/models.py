from sqlalchemy import Column, String, Float, Integer, DateTime, Boolean, Text
from sqlalchemy.dialects.postgresql import UUID
from datetime import datetime
from uuid import uuid4

from .database import Base


class TradeSignal(Base):
    """
    Trade signals generated by trading strategies.
    Always logged regardless of whether order is placed.
    """
    __tablename__ = "trade_signals"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Bot identification
    bot_name = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    strategy_name = Column(String(100), nullable=False, index=True)
    timeframe = Column(String(20), nullable=False)  # e.g., "ONE_MIN", "FIVE_MIN"
    
    # Signal details
    action = Column(String(10), nullable=False)  # BUY/SELL
    entry_price = Column(Float, nullable=False)
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    
    # Optional signal metadata
    reason = Column(String(500), nullable=True)  # Why the signal was generated
    
    # Concurrent trade management
    max_concurrent_trades = Column(Integer, nullable=False)
    current_active_trades = Column(Integer, nullable=False)
    
    # Timestamps
    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)

    def __repr__(self):
        return f"<TradeSignal(bot={self.bot_name}, symbol={self.symbol}, action={self.action})>"


class Order(Base):
    """
    Orders placed with IBKR (successful or failed).
    Maps to PlaceOrderResult from OrderManager.
    """
    __tablename__ = "orders"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Bot identification
    bot_name = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    
    # PlaceOrderResult fields
    success = Column(Boolean, nullable=False)
    error = Column(Text, nullable=True)
    
    # Order details
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    
    # IBKR Trade objects count (for bracket orders)
    trade_count = Column(Integer, nullable=True)  # Number of trades in bracket
    
    # Timestamps
    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)

    def __repr__(self):
        return f"<Order(bot={self.bot_name}, symbol={self.symbol}, success={self.success})>"


class ExecutedTrade(Base):
    """
    Actual trade executions from IBKR.
    Maps to IBKR Trade object when filled.
    """
    __tablename__ = "executed_trades"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Bot identification
    bot_name = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    
    # IBKR Trade object fields
    ibkr_order_id = Column(Integer, nullable=False, index=True)  # trade.order.orderId
    ibkr_contract_id = Column(Integer, nullable=True)  # trade.contract.conId
    ibkr_parent_order_id = Column(Integer, nullable=True, index=True)  # trade.order.parentId (0 for parent orders)
    
    # Order details from trade.order
    action = Column(String(10), nullable=False)  # BUY/SELL
    order_type = Column(String(20), nullable=False)  # LMT, MKT, STP, etc.
    order_purpose = Column(String(15), nullable=True)  # ENTRY, TAKE_PROFIT, STOP_LOSS
    total_quantity = Column(Integer, nullable=False)
    limit_price = Column(Float, nullable=True)  # trade.order.lmtPrice
    aux_price = Column(Float, nullable=True)  # trade.order.auxPrice (stop price)
    
    # OrderStatus details from trade.orderStatus
    status = Column(String(20), nullable=False)  # Filled, Cancelled, etc.
    filled_quantity = Column(Integer, nullable=False)
    remaining_quantity = Column(Integer, nullable=False)
    avg_fill_price = Column(Float, nullable=True)
    last_fill_price = Column(Float, nullable=True)
    
    # Financial details
    commission = Column(Float, nullable=True)
    realized_pnl = Column(Float, nullable=True)
    
    # Timestamps
    fill_time = Column(DateTime, default=datetime.utcnow, nullable=False)  # When this execution happened
    last_update_time = Column(DateTime, default=datetime.utcnow, nullable=False)
    
    # Additional IBKR data
    exchange = Column(String(20), nullable=True)
    currency = Column(String(10), nullable=True)

    def __repr__(self):
        return f"<ExecutedTrade(bot={self.bot_name}, symbol={self.symbol}, ibkr_id={self.ibkr_order_id}, filled={self.filled_quantity}@{self.avg_fill_price})>"


class OrderCancellation(Base):
    """
    Order cancellations (manual or strategy-triggered).
    """
    __tablename__ = "order_cancellations"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Bot identification
    bot_name = Column(String(100), nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    
    # Cancellation details
    ibkr_order_id = Column(Integer, nullable=False, index=True)
    reason = Column(String(50), nullable=False)  # "strategy_cancel", "manual_cancel", "timeout", etc.
    
    # Timestamps
    cancelled_time = Column(DateTime, default=datetime.utcnow, nullable=False)

    def __repr__(self):
        return f"<OrderCancellation(bot={self.bot_name}, ibkr_id={self.ibkr_order_id}, reason={self.reason})>" 